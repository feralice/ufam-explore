datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Usuario {
  id         String   @id @default(uuid())
  perfilId   Int
  nome       String
  username   String
  email      String   @unique
  senha      String
  funcao     String
  fotoPerfil String?
  biografia  String?
  cnpj       String?  @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  perfil      Perfil       @relation(fields: [perfilId], references: [id])
  postagens   Postagem[]
  comentarios Comentario[]
  upvotes     Upvote[]
  downvotes   Downvote[]
  salvos      Salvar[]
}

model Curso {
  id     String @id @default(uuid())
  nome   String
  area   Area   @relation(fields: [areaId], references: [id])
  areaId String

  postagens        Postagem[]
  cursosEmPostagem CursosEmPostagem[]
}

model Area {
  id     String  @id @default(uuid())
  nome   String
  cursos Curso[]
}

model Tag {
  id   String @id @default(uuid())
  nome String

  postagens      Postagem[]
  tagsEmPostagem TagsEmPostagem[]

  @@unique([nome])
}

model Evento {
  id    String   @id @default(uuid())
  data  DateTime
  local String
  texto String?

  postagens Postagem[]
}

model Postagem {
  id        String   @id @default(uuid())
  titulo    String
  texto     String
  imagemUrl String?
  usuarioId String
  eventoId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  usuario Usuario @relation(fields: [usuarioId], references: [id])
  evento  Evento? @relation(fields: [eventoId], references: [id])

  comentarios      Comentario[]
  upvotes          Upvote[]
  downvotes        Downvote[]
  salvos           Salvar[]
  tags             Tag[]
  cursos           Curso[]
  tagsEmPostagem   TagsEmPostagem[]
  cursosEmPostagem CursosEmPostagem[]
}

model Comentario {
  id         String   @id @default(uuid())
  data       DateTime
  conteudo   String
  usuarioId  String
  postagemId String

  usuario  Usuario  @relation(fields: [usuarioId], references: [id])
  postagem Postagem @relation(fields: [postagemId], references: [id])
}

model Upvote {
  id         String   @id @default(uuid())
  usuarioId  String
  postagemId String
  data       DateTime

  usuario  Usuario  @relation(fields: [usuarioId], references: [id])
  postagem Postagem @relation(fields: [postagemId], references: [id])
}

model Downvote {
  id         String   @id @default(uuid())
  usuarioId  String
  postagemId String
  data       DateTime

  usuario  Usuario  @relation(fields: [usuarioId], references: [id])
  postagem Postagem @relation(fields: [postagemId], references: [id])
}

model Salvar {
  id         String   @id @default(uuid())
  usuarioId  String
  postagemId String
  data       DateTime

  usuario  Usuario  @relation(fields: [usuarioId], references: [id])
  postagem Postagem @relation(fields: [postagemId], references: [id])
}

model TagsEmPostagem {
  id         String @id @default(uuid())
  tagId      String
  postagemId String

  tag      Tag      @relation(fields: [tagId], references: [id])
  postagem Postagem @relation(fields: [postagemId], references: [id])
}

model CursosEmPostagem {
  id         String @id @default(uuid())
  cursoId    String
  postagemId String

  curso    Curso    @relation(fields: [cursoId], references: [id])
  postagem Postagem @relation(fields: [postagemId], references: [id])
}

model Perfil {
  id       Int       @id @default(autoincrement())
  nome     String    @unique
  usuarios Usuario[]
}

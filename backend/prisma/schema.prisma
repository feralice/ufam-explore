datasource db {
  provider = "postgresql"
  url      = "postgres://postgres:ufam-explore@ufam-explore.cfs24cskm7l8.us-east-2.rds.amazonaws.com:8000/ufam_explore"
}

generator client {
  provider = "prisma-client-js"
}

model Usuario {
  id               String    @id @default(uuid())
  perfilId         Int
  nome             String
  username         String    @unique
  email            String    @unique
  senha            String
  curso            String?
  fotoPerfil       String?
  biografia        String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime?

  perfil      Perfil       @relation(fields: [perfilId], references: [id])
  postagens   Postagem[]
  comentarios Comentario[]
  upvotes     Upvote[]
  downvotes   Downvote[]
  salvos      Salvar[]

  @@index([email])
}

model Tag {
  id     String  @id @default(uuid())
  nome   String  @unique
  tipo   String?
  areaId String?

  postagens      Postagem[]
  tagsEmPostagem TagsEmPostagem[]

  @@index([nome])
}

model Evento {
  id          String   @id @default(uuid())
  dataInicio  DateTime
  dataFinal   DateTime
  localizacao String
  titulo      String
  descricao   String?

  postagens Postagem[]

  @@index([dataInicio])
}

model Postagem {
  id        String   @id @default(uuid())
  titulo    String
  texto     String
  imagemUrl String?
  usuarioId String
  eventoId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  usuario Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  evento  Evento? @relation(fields: [eventoId], references: [id])

  comentarios    Comentario[]
  upvotes        Upvote[]
  downvotes      Downvote[]
  salvos         Salvar[]
  tags           Tag[]
  tagsEmPostagem TagsEmPostagem[]

  @@index([usuarioId])
  @@index([eventoId])
}

model Comentario {
  id         String   @id @default(uuid())
  conteudo   String
  usuarioId  String
  postagemId String
  tipo       String?  @default("comentario")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  usuario  Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  postagem Postagem @relation(fields: [postagemId], references: [id], onDelete: Cascade)

  @@index([usuarioId])
  @@index([postagemId])
}

model Upvote {
  id         String   @id @default(uuid())
  usuarioId  String
  postagemId String
  tipo       String?  @default("upvote")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  usuario  Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  postagem Postagem @relation(fields: [postagemId], references: [id], onDelete: Cascade)

  @@index([usuarioId])
  @@index([postagemId])
}

model Downvote {
  id         String   @id @default(uuid())
  usuarioId  String
  postagemId String
  tipo       String?  @default("downvote")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  usuario  Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  postagem Postagem @relation(fields: [postagemId], references: [id], onDelete: Cascade)

  @@index([usuarioId])
  @@index([postagemId])
}

model Salvar {
  id         String   @id @default(uuid())
  usuarioId  String
  postagemId String
  tipo       String?  @default("salvar")
  data       DateTime

  usuario  Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  postagem Postagem @relation(fields: [postagemId], references: [id], onDelete: Cascade)

  @@index([usuarioId])
  @@index([postagemId])
}

model TagsEmPostagem {
  id         String @id @default(uuid())
  tagId      String
  postagemId String

  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  postagem Postagem @relation(fields: [postagemId], references: [id], onDelete: Cascade)

  @@index([tagId])
  @@index([postagemId])
}

model Perfil {
  id       Int       @id @default(autoincrement())
  nome     String    @unique
  usuarios Usuario[]
}
